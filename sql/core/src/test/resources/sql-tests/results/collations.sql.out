-- Automatically generated by SQLQueryTestSuite
-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('aaa', 'aaa')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('AAA', 'AAA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('bbb', 'bbb')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values('BBB', 'BBB')
-- !query schema
struct<>
-- !query output



-- !query
describe table t1
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
utf8_binary         	string              	                    
utf8_lcase          	string collate UTF8_LCASE


-- !query
select count(*) from t1 group by utf8_binary
-- !query schema
struct<count(1):bigint>
-- !query output
1
1
1
1


-- !query
select count(*) from t1 group by utf8_lcase
-- !query schema
struct<count(1):bigint>
-- !query output
2
2


-- !query
select * from t1 where utf8_binary = 'aaa'
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
aaa	aaa


-- !query
select * from t1 where utf8_lcase = 'aaa' collate utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
aaa	aaa


-- !query
select * from t1 where utf8_binary < 'bbb'
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
BBB	BBB
aaa	aaa


-- !query
select * from t1 where utf8_lcase < 'bbb' collate utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
aaa	aaa


-- !query
select l.utf8_binary, r.utf8_lcase from t1 l join t1 r on l.utf8_lcase = r.utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output
AAA	AAA
AAA	aaa
BBB	BBB
BBB	bbb
aaa	AAA
aaa	aaa
bbb	BBB
bbb	bbb


-- !query
create table t2(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values('aaa', 'aaa')
-- !query schema
struct<>
-- !query output



-- !query
insert into t2 values('bbb', 'bbb')
-- !query schema
struct<>
-- !query output



-- !query
select * from t1 anti join t2 on t1.utf8_lcase = t2.utf8_lcase
-- !query schema
struct<utf8_binary:string,utf8_lcase:string collate UTF8_LCASE>
-- !query output



-- !query
drop table t2
-- !query schema
struct<>
-- !query output



-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') except all select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb
zzz
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('AAA'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') union all select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
AAA
BBB
ZZZ
aaa
aaa
bbb
bbb
zzz


-- !query
select col1 collate utf8_lcase from values ('aaa'), ('bbb'), ('BBB'), ('zzz'), ('ZZZ') intersect select col1 collate utf8_lcase from values ('aaa'), ('bbb')
-- !query schema
struct<collate(col1, utf8_lcase):string collate UTF8_LCASE>
-- !query output
aaa
bbb


-- !query
create table t1 (c1 struct<utf8_binary: string collate utf8_binary, utf8_lcase: string collate utf8_lcase>) USING PARQUET
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (named_struct('utf8_binary', 'aaa', 'utf8_lcase', 'aaa'))
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (named_struct('utf8_binary', 'AAA', 'utf8_lcase', 'AAA'))
-- !query schema
struct<>
-- !query output



-- !query
select count(*) from t1 group by c1.utf8_binary
-- !query schema
struct<count(1):bigint>
-- !query output
1
1


-- !query
select count(*) from t1 group by c1.utf8_lcase
-- !query schema
struct<count(1):bigint>
-- !query output
2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
select array_contains(ARRAY('aaa' collate utf8_lcase),'AAA' collate utf8_lcase)
-- !query schema
struct<array_contains(array(collate(aaa, utf8_lcase)), collate(AAA, utf8_lcase)):boolean>
-- !query output
true


-- !query
select array_position(ARRAY('aaa' collate utf8_lcase, 'bbb' collate utf8_lcase),'BBB' collate utf8_lcase)
-- !query schema
struct<array_position(array(collate(aaa, utf8_lcase), collate(bbb, utf8_lcase)), collate(BBB, utf8_lcase)):bigint>
-- !query output
2


-- !query
select nullif('aaa' COLLATE utf8_lcase, 'AAA' COLLATE utf8_lcase)
-- !query schema
struct<nullif(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
NULL


-- !query
select least('aaa' COLLATE utf8_lcase, 'AAA' collate utf8_lcase, 'a' collate utf8_lcase)
-- !query schema
struct<least(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase), collate(a, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
a


-- !query
select arrays_overlap(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<arrays_overlap(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):boolean>
-- !query output
true


-- !query
select array_distinct(array('aaa' collate utf8_lcase, 'AAA' collate utf8_lcase))
-- !query schema
struct<array_distinct(array(collate(aaa, utf8_lcase), collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_union(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_union(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_intersect(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_intersect(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
["aaa"]


-- !query
select array_except(array('aaa' collate utf8_lcase), array('AAA' collate utf8_lcase))
-- !query schema
struct<array_except(array(collate(aaa, utf8_lcase)), array(collate(AAA, utf8_lcase))):array<string collate UTF8_LCASE>>
-- !query output
[]


-- !query
select 'a' collate unicode < 'A'
-- !query schema
struct<(collate(a, unicode) < A):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ci = 'A'
-- !query schema
struct<(collate(a, unicode_ci) = A):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ai = 'å'
-- !query schema
struct<(collate(a, unicode_ai) = å):boolean>
-- !query output
true


-- !query
select 'a' collate unicode_ci_ai = 'Å'
-- !query schema
struct<(collate(a, unicode_ci_ai) = Å):boolean>
-- !query output
true


-- !query
select 'a' collate en < 'A'
-- !query schema
struct<(collate(a, en) < A):boolean>
-- !query output
true


-- !query
select 'a' collate en_ci = 'A'
-- !query schema
struct<(collate(a, en_ci) = A):boolean>
-- !query output
true


-- !query
select 'a' collate en_ai = 'å'
-- !query schema
struct<(collate(a, en_ai) = å):boolean>
-- !query output
true


-- !query
select 'a' collate en_ci_ai = 'Å'
-- !query schema
struct<(collate(a, en_ci_ai) = Å):boolean>
-- !query output
true


-- !query
select 'Kypper' collate sv < 'Köpfe'
-- !query schema
struct<(collate(Kypper, sv) < Köpfe):boolean>
-- !query output
true


-- !query
select 'Kypper' collate de > 'Köpfe'
-- !query schema
struct<(collate(Kypper, de) > Köpfe):boolean>
-- !query output
true


-- !query
select 'I' collate tr_ci = 'ı'
-- !query schema
struct<(collate(I, tr_ci) = ı):boolean>
-- !query output
true


-- !query
create table t4 (text string collate utf8_binary, pairDelim string collate utf8_lcase, keyValueDelim string collate utf8_binary) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t4 values('a:1,b:2,c:3', ',', ':')
-- !query schema
struct<>
-- !query output



-- !query
select str_to_map(text, pairDelim, keyValueDelim) from t4
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select str_to_map(text collate utf8_binary, pairDelim collate utf8_lcase, keyValueDelim collate utf8_binary) from t4
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "`string`, `string collate UTF8_LCASE`"
  }
}


-- !query
select str_to_map(text collate utf8_binary, pairDelim collate utf8_binary, keyValueDelim collate utf8_binary) from t4
-- !query schema
struct<str_to_map(collate(text, utf8_binary), collate(pairDelim, utf8_binary), collate(keyValueDelim, utf8_binary)):map<string,string>>
-- !query output
{"a":"1","b":"2","c":"3"}


-- !query
drop table t4
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Spark', 'SQL')
-- !query schema
struct<>
-- !query output



-- !query
select concat_ws(' ', utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select concat_ws(' ' collate utf8_binary, utf8_binary, 'SQL' collate utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "`string`, `string collate UTF8_LCASE`"
  }
}


-- !query
select concat_ws(',', utf8_lcase, 'word'), concat_ws(',', utf8_binary, 'word') from t1
-- !query schema
struct<concat_ws(,, utf8_lcase, word):string collate UTF8_LCASE,concat_ws(,, utf8_binary, word):string>
-- !query output
SQL,word	Spark,word


-- !query
select concat_ws(',', utf8_lcase, 'word' collate utf8_binary), concat_ws(',', utf8_binary, 'word' collate utf8_lcase) from t1
-- !query schema
struct<concat_ws(,, utf8_lcase, collate(word, utf8_binary)):string,concat_ws(,, utf8_binary, collate(word, utf8_lcase)):string collate UTF8_LCASE>
-- !query output
SQL,word	Spark,word


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Spark', 'SQL')
-- !query schema
struct<>
-- !query output



-- !query
select elt(2, utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select elt(1, utf8_binary collate utf8_lcase, utf8_lcase) from t1
-- !query schema
struct<elt(1, collate(utf8_binary, utf8_lcase), utf8_lcase):string collate UTF8_LCASE>
-- !query output
Spark


-- !query
select elt(1, utf8_binary, 'word'), elt(1, utf8_lcase, 'word') from t1
-- !query schema
struct<elt(1, utf8_binary, word):string,elt(1, utf8_lcase, word):string collate UTF8_LCASE>
-- !query output
Spark	SQL


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaAAaA')
-- !query schema
struct<>
-- !query output



-- !query
select split_part(utf8_binary, utf8_lcase, 3) from t1
-- !query schema
struct<split_part(utf8_binary, utf8_lcase, 3):string>
-- !query output



-- !query
select split_part(utf8_binary, 'a', 3), split_part(utf8_lcase, 'a', 3) from t1
-- !query schema
struct<split_part(utf8_binary, a, 3):string,split_part(utf8_lcase, a, 3):string collate UTF8_LCASE>
-- !query output
A


-- !query
select split_part(utf8_binary, 'a' collate utf8_lcase, 3), split_part(utf8_lcase, 'a' collate utf8_binary, 3) from t1
-- !query schema
struct<split_part(utf8_binary, collate(a, utf8_lcase), 3):string,split_part(utf8_lcase, collate(a, utf8_binary), 3):string collate UTF8_LCASE>
-- !query output
A


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
select contains(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select contains(utf8_binary collate utf8_lcase, utf8_lcase), contains(utf8_binary, utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<contains(collate(utf8_binary, utf8_lcase), utf8_lcase):boolean,contains(utf8_binary, collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
true	false


-- !query
select contains(utf8_binary, 'AAa'), contains(utf8_lcase, 'AaAA') from t1
-- !query schema
struct<contains(utf8_binary, AAa):boolean,contains(utf8_lcase, AaAA):boolean>
-- !query output
true	true


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaAaaAaaAaAaaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
select substring_index(utf8_binary, utf8_lcase, 1) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select substring_index(utf8_lcase, utf8_binary collate utf8_lcase, 3), substring_index(utf8_lcase collate utf8_binary, utf8_binary, -3) from t1
-- !query schema
struct<substring_index(utf8_lcase, collate(utf8_binary, utf8_lcase), 3):string collate UTF8_LCASE,substring_index(collate(utf8_lcase, utf8_binary), utf8_binary, -3):string>
-- !query output
aa	aaAaaAaAaaAaaAaAaaAaaAaA
aaAaaAaA	aaAaaAaA


-- !query
select substring_index(utf8_binary, 'AAa', 1), substring_index(utf8_lcase, 'AaAA', 3) from t1
-- !query schema
struct<substring_index(utf8_binary, AAa, 1):string,substring_index(utf8_lcase, AaAA, 3):string collate UTF8_LCASE>
-- !query output
aaAa	aa
aaAa	aa


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaAaaAaaAaAaaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
select instr(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select instr(utf8_lcase, utf8_binary collate utf8_lcase), instr(utf8_lcase collate utf8_binary, utf8_binary) from t1
-- !query schema
struct<instr(utf8_lcase, collate(utf8_binary, utf8_lcase)):int,instr(collate(utf8_lcase, utf8_binary), utf8_binary):int>
-- !query output
1	0
1	0


-- !query
select instr(utf8_binary, 'AAa'), instr(utf8_lcase, 'AaAA') from t1
-- !query schema
struct<instr(utf8_binary, AAa):int,instr(utf8_lcase, AaAA):int>
-- !query output
5	1
5	1


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
select find_in_set(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select find_in_set(utf8_binary, 'aaAaaAaA,i̇o'), find_in_set(utf8_lcase, 'aaAaaAaA,i̇o') from t1
-- !query schema
struct<find_in_set(utf8_binary, aaAaaAaA,i̇o):int,find_in_set(utf8_lcase, aaAaaAaA,i̇o):int>
-- !query output
0	1
0	2


-- !query
select find_in_set(utf8_binary, 'aaAaaAaA,i̇o' collate utf8_lcase), find_in_set(utf8_lcase, 'aaAaaAaA,i̇o' collate utf8_binary) from t1
-- !query schema
struct<find_in_set(utf8_binary, collate(aaAaaAaA,i̇o, utf8_lcase)):int,find_in_set(utf8_lcase, collate(aaAaaAaA,i̇o, utf8_binary)):int>
-- !query output
1	1
2	0


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
select startswith(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select startswith(utf8_binary, 'aaAaaAaA'), startswith(utf8_lcase, 'aaAaaAaA') from t1
-- !query schema
struct<startswith(utf8_binary, aaAaaAaA):boolean,startswith(utf8_lcase, aaAaaAaA):boolean>
-- !query output
false	false
false	true


-- !query
select startswith(utf8_binary, 'aaAaaAaA' collate utf8_lcase), startswith(utf8_lcase, 'aaAaaAaA' collate utf8_binary) from t1
-- !query schema
struct<startswith(utf8_binary, collate(aaAaaAaA, utf8_lcase)):boolean,startswith(utf8_lcase, collate(aaAaaAaA, utf8_binary)):boolean>
-- !query output
false	false
true	true


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
select translate(utf8_binary, utf8_lcase collate utf8_lcase, 'abc' collate utf8_binary) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "`string collate UTF8_LCASE`, `string`"
  }
}


-- !query
select translate(utf8_binary, 'aaAaaAaA', '12345'), translate(utf8_lcase, 'aaAaaAaA', '12345') from t1
-- !query schema
struct<translate(utf8_binary, aaAaaAaA, 12345):string,translate(utf8_lcase, aaAaaAaA, 12345):string collate UTF8_LCASE>
-- !query output
11313313	11111111
İo	İo


-- !query
select translate(utf8_binary, 'aaAaaAaA' collate utf8_lcase, '12345'), translate(utf8_lcase, 'aaAaaAaA' collate utf8_binary, '12345') from t1
-- !query schema
struct<translate(utf8_binary, collate(aaAaaAaA, utf8_lcase), 12345):string collate UTF8_LCASE,translate(utf8_lcase, collate(aaAaaAaA, utf8_binary), 12345):string>
-- !query output
11111111	11311313
İo	İo


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'İo')
-- !query schema
struct<>
-- !query output



-- !query
select replace(utf8_binary, utf8_lcase collate utf8_lcase, 'abc' collate utf8_binary) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.EXPLICIT",
  "sqlState" : "42P21",
  "messageParameters" : {
    "explicitTypes" : "`string collate UTF8_LCASE`, `string`"
  }
}


-- !query
select replace(utf8_binary, 'aaAaaAaA', '12345'), replace(utf8_lcase, 'aaAaaAaA', '12345') from t1
-- !query schema
struct<replace(utf8_binary, aaAaaAaA, 12345):string,replace(utf8_lcase, aaAaaAaA, 12345):string collate UTF8_LCASE>
-- !query output
aaAaAAaA	12345
İo	İo


-- !query
select replace(utf8_binary, 'aaAaaAaA' collate utf8_lcase, '12345'), replace(utf8_lcase, 'aaAaaAaA' collate utf8_binary, '12345') from t1
-- !query schema
struct<replace(utf8_binary, collate(aaAaaAaA, utf8_lcase), 12345):string collate UTF8_LCASE,replace(utf8_lcase, collate(aaAaaAaA, utf8_binary), 12345):string>
-- !query output
12345	12345
İo	İo


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'i̇o')
-- !query schema
struct<>
-- !query output



-- !query
select endswith(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select endswith(utf8_binary, 'aaAaaAaA'), endswith(utf8_lcase, 'aaAaaAaA') from t1
-- !query schema
struct<endswith(utf8_binary, aaAaaAaA):boolean,endswith(utf8_lcase, aaAaaAaA):boolean>
-- !query output
false	false
false	true


-- !query
select endswith(utf8_binary, utf8_lcase collate utf8_binary), endswith(utf8_lcase, utf8_binary collate utf8_lcase) from t1
-- !query schema
struct<endswith(utf8_binary, collate(utf8_lcase, utf8_binary)):boolean,endswith(utf8_lcase, collate(utf8_binary, utf8_lcase)):boolean>
-- !query output
false	true
false	true


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('İo', 'i̇o')
-- !query schema
struct<>
-- !query output



-- !query
select repeat(utf8_binary, 3), repeat(utf8_lcase, 2) from t1
-- !query schema
struct<repeat(utf8_binary, 3):string,repeat(utf8_lcase, 2):string collate UTF8_LCASE>
-- !query output
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaA
İoİoİo	i̇oi̇o


-- !query
select repeat(utf8_binary collate utf8_lcase, 3), repeat(utf8_lcase collate utf8_binary, 2) from t1
-- !query schema
struct<repeat(collate(utf8_binary, utf8_lcase), 3):string collate UTF8_LCASE,repeat(collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
aaAaAAaAaaAaAAaAaaAaAAaA	aaAaaAaAaaAaaAaA
İoİoİo	i̇oi̇o


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
select ascii(utf8_binary), ascii(utf8_lcase) from t1
-- !query schema
struct<ascii(utf8_binary):int,ascii(utf8_lcase):int>
-- !query output
101	101
97	97


-- !query
select ascii(utf8_binary collate utf8_lcase), ascii(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<ascii(collate(utf8_binary, utf8_lcase)):int,ascii(collate(utf8_lcase, utf8_binary)):int>
-- !query output
101	101
97	97


-- !query
select unbase64(utf8_binary), unbase64(utf8_lcase) from t1
-- !query schema
struct<unbase64(utf8_binary):binary,unbase64(utf8_lcase):binary>
-- !query output
i� �	i�h�
y�v	y�v


-- !query
select unbase64(utf8_binary collate utf8_lcase), unbase64(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<unbase64(collate(utf8_binary, utf8_lcase)):binary,unbase64(collate(utf8_lcase, utf8_binary)):binary>
-- !query output
i� �	i�h�
y�v	y�v


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(ascii long) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (97)
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (66)
-- !query schema
struct<>
-- !query output



-- !query
select chr(ascii) from t1
-- !query schema
struct<chr(ascii):string>
-- !query output
B
a


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
select base64(utf8_binary), base64(utf8_lcase) from t1
-- !query schema
struct<base64(utf8_binary):string,base64(utf8_lcase):string>
-- !query output
ZWZkMg==	ZWZkMg==


-- !query
select base64(utf8_binary collate utf8_lcase), base64(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<base64(collate(utf8_binary, utf8_lcase)):string,base64(collate(utf8_lcase, utf8_binary)):string>
-- !query output
ZWZkMg==	ZWZkMg==


-- !query
select decode(encode(utf8_binary, 'utf-8'), 'utf-8'), decode(encode(utf8_lcase, 'utf-8'), 'utf-8') from t1
-- !query schema
struct<decode(encode(utf8_binary, utf-8), utf-8):string,decode(encode(utf8_lcase, utf-8), utf-8):string>
-- !query output
efd2	efd2


-- !query
select decode(encode(utf8_binary collate utf8_lcase, 'utf-8'), 'utf-8'), decode(encode(utf8_lcase collate utf8_binary, 'utf-8'), 'utf-8') from t1
-- !query schema
struct<decode(encode(collate(utf8_binary, utf8_lcase), utf-8), utf-8):string,decode(encode(collate(utf8_lcase, utf8_binary), utf-8), utf-8):string>
-- !query output
efd2	efd2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(ascii double) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (97.52143)
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (66.421)
-- !query schema
struct<>
-- !query output



-- !query
select format_number(ascii, '###.###') from t1
-- !query schema
struct<format_number(ascii, ###.###):string>
-- !query output
66.421
97.521


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
select encode(utf8_binary, 'utf-8'), encode(utf8_lcase, 'utf-8') from t1
-- !query schema
struct<encode(utf8_binary, utf-8):binary,encode(utf8_lcase, utf-8):binary>
-- !query output
efd2	efd2


-- !query
select encode(utf8_binary collate utf8_lcase, 'utf-8'), encode(utf8_lcase collate utf8_binary, 'utf-8') from t1
-- !query schema
struct<encode(collate(utf8_binary, utf8_lcase), utf-8):binary,encode(collate(utf8_lcase, utf8_binary), utf-8):binary>
-- !query output
efd2	efd2


-- !query
select to_binary(utf8_binary, 'utf-8'), to_binary(utf8_lcase, 'utf-8') from t1
-- !query schema
struct<to_binary(utf8_binary, utf-8):binary,to_binary(utf8_lcase, utf-8):binary>
-- !query output
efd2	efd2


-- !query
select to_binary(utf8_binary collate utf8_lcase, 'utf-8'), to_binary(utf8_lcase collate utf8_binary, 'utf-8') from t1
-- !query schema
struct<to_binary(collate(utf8_binary, utf8_lcase), utf-8):binary,to_binary(collate(utf8_lcase, utf8_binary), utf-8):binary>
-- !query output
efd2	efd2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Hello, world! Nice day.', 'Hello, world! Nice day.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Something else. Nothing here.', 'Something else. Nothing here.')
-- !query schema
struct<>
-- !query output



-- !query
select sentences(utf8_binary), sentences(utf8_lcase) from t1
-- !query schema
struct<sentences(utf8_binary, , ):array<array<string>>,sentences(utf8_lcase, , ):array<array<string collate UTF8_LCASE>>>
-- !query output
[["Hello","world"],["Nice","day"]]	[["Hello","world"],["Nice","day"]]
[["Something","else"],["Nothing","here"]]	[["Something","else"],["Nothing","here"]]


-- !query
select sentences(utf8_binary collate utf8_lcase), sentences(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<sentences(collate(utf8_binary, utf8_lcase), , ):array<array<string collate UTF8_LCASE>>,sentences(collate(utf8_lcase, utf8_binary), , ):array<array<string>>>
-- !query output
[["Hello","world"],["Nice","day"]]	[["Hello","world"],["Nice","day"]]
[["Something","else"],["Nothing","here"]]	[["Something","else"],["Nothing","here"]]


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Hello, world! Nice day.', 'Hello, world! Nice day.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Something else. Nothing here.', 'Something else. Nothing here.')
-- !query schema
struct<>
-- !query output



-- !query
select upper(utf8_binary), upper(utf8_lcase) from t1
-- !query schema
struct<upper(utf8_binary):string,upper(utf8_lcase):string collate UTF8_LCASE>
-- !query output
HELLO, WORLD! NICE DAY.	HELLO, WORLD! NICE DAY.
SOMETHING ELSE. NOTHING HERE.	SOMETHING ELSE. NOTHING HERE.


-- !query
select upper(utf8_binary collate utf8_lcase), upper(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<upper(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,upper(collate(utf8_lcase, utf8_binary)):string>
-- !query output
HELLO, WORLD! NICE DAY.	HELLO, WORLD! NICE DAY.
SOMETHING ELSE. NOTHING HERE.	SOMETHING ELSE. NOTHING HERE.


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Hello, world! Nice day.', 'Hello, world! Nice day.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Something else. Nothing here.', 'Something else. Nothing here.')
-- !query schema
struct<>
-- !query output



-- !query
select lower(utf8_binary), lower(utf8_lcase) from t1
-- !query schema
struct<lower(utf8_binary):string,lower(utf8_lcase):string collate UTF8_LCASE>
-- !query output
hello, world! nice day.	hello, world! nice day.
something else. nothing here.	something else. nothing here.


-- !query
select lower(utf8_binary collate utf8_lcase), lower(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<lower(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,lower(collate(utf8_lcase, utf8_binary)):string>
-- !query output
hello, world! nice day.	hello, world! nice day.
something else. nothing here.	something else. nothing here.


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Hello, world! Nice day.', 'Hello, world! Nice day.')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('Something else. Nothing here.', 'Something else. Nothing here.')
-- !query schema
struct<>
-- !query output



-- !query
select initcap(utf8_binary), initcap(utf8_lcase) from t1
-- !query schema
struct<initcap(utf8_binary):string,initcap(utf8_lcase):string collate UTF8_LCASE>
-- !query output
Hello, World! Nice Day.	Hello, World! Nice Day.
Something Else. Nothing Here.	Something Else. Nothing Here.


-- !query
select initcap(utf8_binary collate utf8_lcase), initcap(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<initcap(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,initcap(collate(utf8_lcase, utf8_binary)):string>
-- !query output
Hello, World! Nice Day.	Hello, World! Nice Day.
Something Else. Nothing Here.	Something Else. Nothing Here.


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('aaAaAAaA', 'aaAaaAaAaaAaaAaAaaAaaAaA')
-- !query schema
struct<>
-- !query output



-- !query
select overlay(utf8_binary, utf8_lcase, 3) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select overlay(utf8_lcase, utf8_binary collate utf8_lcase, 3), overlay(utf8_lcase collate utf8_binary, utf8_binary, 3) from t1
-- !query schema
struct<overlay(utf8_lcase, collate(utf8_binary, utf8_lcase), 3, -1):string collate UTF8_LCASE,overlay(collate(utf8_lcase, utf8_binary), utf8_binary, 3, -1):string>
-- !query output
aaaaAaAAaA	aaaaAaAAaA
aaaaAaAAaAAaaAaAaaAaaAaA	aaaaAaAAaAAaaAaAaaAaaAaA


-- !query
select overlay(utf8_binary, 'AAa', 3), overlay(utf8_lcase, 'AaAA', 3) from t1
-- !query schema
struct<overlay(utf8_binary, AAa, 3, -1):string,overlay(utf8_lcase, AaAA, 3, -1):string collate UTF8_LCASE>
-- !query output
aaAAaAaA	aaAaAAaA
aaAAaAaA	aaAaAAaAaaAaaAaAaaAaaAaA


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(format string collate utf8_binary, utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('%s%s', 'abCdE', 'abCdE')
-- !query schema
struct<>
-- !query output



-- !query
select format_string(format, utf8_binary, utf8_lcase) from t1
-- !query schema
struct<format_string(format, utf8_binary, utf8_lcase):string>
-- !query output
abCdEabCdE


-- !query
select format_string(format collate utf8_lcase, utf8_lcase, utf8_binary collate utf8_lcase, 3), format_string(format, utf8_lcase collate utf8_binary, utf8_binary) from t1
-- !query schema
struct<format_string(collate(format, utf8_lcase), utf8_lcase, collate(utf8_binary, utf8_lcase), 3):string collate UTF8_LCASE,format_string(format, collate(utf8_lcase, utf8_binary), utf8_binary):string>
-- !query output
abCdEabCdE	abCdEabCdE


-- !query
select format_string(format, utf8_binary, utf8_lcase) from t1
-- !query schema
struct<format_string(format, utf8_binary, utf8_lcase):string>
-- !query output
abCdEabCdE


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
select soundex(utf8_binary), soundex(utf8_lcase) from t1
-- !query schema
struct<soundex(utf8_binary):string,soundex(utf8_lcase):string>
-- !query output
E130	E130


-- !query
select soundex(utf8_binary collate utf8_lcase), soundex(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<soundex(collate(utf8_binary, utf8_lcase)):string,soundex(collate(utf8_lcase, utf8_binary)):string>
-- !query output
E130	E130


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
select length(utf8_binary), length(utf8_lcase) from t1
-- !query schema
struct<length(utf8_binary):int,length(utf8_lcase):int>
-- !query output
4	4


-- !query
select length(utf8_binary collate utf8_lcase), length(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<length(collate(utf8_binary, utf8_lcase)):int,length(collate(utf8_lcase, utf8_binary)):int>
-- !query output
4	4


-- !query
select bit_length(utf8_binary), bit_length(utf8_lcase) from t1
-- !query schema
struct<bit_length(utf8_binary):int,bit_length(utf8_lcase):int>
-- !query output
32	32


-- !query
select bit_length(utf8_binary collate utf8_lcase), bit_length(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<bit_length(collate(utf8_binary, utf8_lcase)):int,bit_length(collate(utf8_lcase, utf8_binary)):int>
-- !query output
32	32


-- !query
select octet_length(utf8_binary), octet_length(utf8_lcase) from t1
-- !query schema
struct<octet_length(utf8_binary):int,octet_length(utf8_lcase):int>
-- !query output
4	4


-- !query
select octet_length(utf8_binary collate utf8_lcase), octet_length(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<octet_length(collate(utf8_binary, utf8_lcase)):int,octet_length(collate(utf8_lcase, utf8_binary)):int>
-- !query output
4	4


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(num long) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (97)
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values (66)
-- !query schema
struct<>
-- !query output



-- !query
select luhn_check(num) from t1
-- !query schema
struct<luhn_check(num):boolean>
-- !query output
false
false


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('kitten', 'sitTing')
-- !query schema
struct<>
-- !query output



-- !query
select levenshtein(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<levenshtein(utf8_binary, utf8_lcase):int>
-- !query output
4


-- !query
select levenshtein(utf8_binary, 'aaAaaAaA'), levenshtein(utf8_lcase, 'aaAaaAaA') from t1
-- !query schema
struct<levenshtein(utf8_binary, aaAaaAaA):int,levenshtein(utf8_lcase, aaAaaAaA):int>
-- !query output
8	8


-- !query
select levenshtein(utf8_binary, utf8_lcase collate utf8_binary), levenshtein(utf8_lcase, utf8_binary collate utf8_lcase) from t1
-- !query schema
struct<levenshtein(utf8_binary, collate(utf8_lcase, utf8_binary)):int,levenshtein(utf8_lcase, collate(utf8_binary, utf8_lcase)):int>
-- !query output
4	4


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
select is_valid_utf8(utf8_binary), is_valid_utf8(utf8_lcase) from t1
-- !query schema
struct<is_valid_utf8(utf8_binary):boolean,is_valid_utf8(utf8_lcase):boolean>
-- !query output
true	true
true	true


-- !query
select is_valid_utf8(utf8_binary collate utf8_lcase), is_valid_utf8(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<is_valid_utf8(collate(utf8_binary, utf8_lcase)):boolean,is_valid_utf8(collate(utf8_lcase, utf8_binary)):boolean>
-- !query output
true	true
true	true


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
select make_valid_utf8(utf8_binary), make_valid_utf8(utf8_lcase) from t1
-- !query schema
struct<make_valid_utf8(utf8_binary):string,make_valid_utf8(utf8_lcase):string collate UTF8_LCASE>
-- !query output
abc	abc
efd2	efd2


-- !query
select make_valid_utf8(utf8_binary collate utf8_lcase), make_valid_utf8(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<make_valid_utf8(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,make_valid_utf8(collate(utf8_lcase, utf8_binary)):string>
-- !query output
abc	abc
efd2	efd2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
select validate_utf8(utf8_binary), validate_utf8(utf8_lcase) from t1
-- !query schema
struct<validate_utf8(utf8_binary):string,validate_utf8(utf8_lcase):string collate UTF8_LCASE>
-- !query output
abc	abc
efd2	efd2


-- !query
select validate_utf8(utf8_binary collate utf8_lcase), validate_utf8(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<validate_utf8(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,validate_utf8(collate(utf8_lcase, utf8_binary)):string>
-- !query output
abc	abc
efd2	efd2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
select try_validate_utf8(utf8_binary), try_validate_utf8(utf8_lcase) from t1
-- !query schema
struct<try_validate_utf8(utf8_binary):string,try_validate_utf8(utf8_lcase):string collate UTF8_LCASE>
-- !query output
abc	abc
efd2	efd2


-- !query
select try_validate_utf8(utf8_binary collate utf8_lcase), try_validate_utf8(utf8_lcase collate utf8_binary) from t1
-- !query schema
struct<try_validate_utf8(collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,try_validate_utf8(collate(utf8_lcase, utf8_binary)):string>
-- !query output
abc	abc
efd2	efd2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
select substr(utf8_binary, 2, 2), substr(utf8_lcase, 2, 2) from t1
-- !query schema
struct<substr(utf8_binary, 2, 2):string,substr(utf8_lcase, 2, 2):string collate UTF8_LCASE>
-- !query output
bc	bc
fd	fd


-- !query
select substr(utf8_binary collate utf8_lcase, 2, 2), substr(utf8_lcase collate utf8_binary, 2, 2) from t1
-- !query schema
struct<substr(collate(utf8_binary, utf8_lcase), 2, 2):string collate UTF8_LCASE,substr(collate(utf8_lcase, utf8_binary), 2, 2):string>
-- !query output
bc	bc
fd	fd


-- !query
select right(utf8_binary, 2), right(utf8_lcase, 2) from t1
-- !query schema
struct<right(utf8_binary, 2):string,right(utf8_lcase, 2):string collate UTF8_LCASE>
-- !query output
bc	bc
d2	d2


-- !query
select right(utf8_binary collate utf8_lcase, 2), right(utf8_lcase collate utf8_binary, 2) from t1
-- !query schema
struct<right(collate(utf8_binary, utf8_lcase), 2):string collate UTF8_LCASE,right(collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
bc	bc
d2	d2


-- !query
select left(utf8_binary, '2' collate utf8_lcase), left(utf8_lcase, 2) from t1
-- !query schema
struct<left(utf8_binary, collate(2, utf8_lcase)):string,left(utf8_lcase, 2):string collate UTF8_LCASE>
-- !query output
ab	ab
ef	ef


-- !query
select left(utf8_binary collate utf8_lcase, 2), left(utf8_lcase collate utf8_binary, 2) from t1
-- !query schema
struct<left(collate(utf8_binary, utf8_lcase), 2):string collate UTF8_LCASE,left(collate(utf8_lcase, utf8_binary), 2):string>
-- !query output
ab	ab
ef	ef


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
select rpad(utf8_binary, 8, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select rpad(utf8_lcase, 8, utf8_binary collate utf8_lcase), rpad(utf8_lcase collate utf8_binary, 8, utf8_binary) from t1
-- !query schema
struct<rpad(utf8_lcase, 8, collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,rpad(collate(utf8_lcase, utf8_binary), 8, utf8_binary):string>
-- !query output
abcabcab	abcabcab
efd2efd2	efd2efd2


-- !query
select rpad(utf8_binary, 8, 'AAa'), rpad(utf8_lcase, 8, 'AaAA') from t1
-- !query schema
struct<rpad(utf8_binary, 8, AAa):string,rpad(utf8_lcase, 8, AaAA):string collate UTF8_LCASE>
-- !query output
abcAAaAA	abcAaAAA
efd2AAaA	efd2AaAA


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efd2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'abc')
-- !query schema
struct<>
-- !query output



-- !query
select lpad(utf8_binary, 8, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select lpad(utf8_lcase, 8, utf8_binary collate utf8_lcase), lpad(utf8_lcase collate utf8_binary, 8, utf8_binary) from t1
-- !query schema
struct<lpad(utf8_lcase, 8, collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,lpad(collate(utf8_lcase, utf8_binary), 8, utf8_binary):string>
-- !query output
abcababc	abcababc
efd2efd2	efd2efd2


-- !query
select lpad(utf8_binary, 8, 'AAa'), lpad(utf8_lcase, 8, 'AaAA') from t1
-- !query schema
struct<lpad(utf8_binary, 8, AAa):string,lpad(utf8_lcase, 8, AaAA):string collate UTF8_LCASE>
-- !query output
AAaAAabc	AaAAAabc
AAaAefd2	AaAAefd2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('efd2', 'efD2')
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abc', 'aBc')
-- !query schema
struct<>
-- !query output



-- !query
select locate(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select locate(utf8_lcase, utf8_binary collate utf8_lcase), locate(utf8_lcase collate utf8_binary, utf8_binary) from t1
-- !query schema
struct<locate(utf8_lcase, collate(utf8_binary, utf8_lcase), 1):int,locate(collate(utf8_lcase, utf8_binary), utf8_binary, 1):int>
-- !query output
1	0
1	0


-- !query
select locate('B', utf8_binary), locate('B', utf8_lcase) from t1
-- !query schema
struct<locate(B, utf8_binary, 1):int,locate(B, utf8_lcase, 1):int>
-- !query output
0	0
0	2


-- !query
drop table t1
-- !query schema
struct<>
-- !query output



-- !query
create table t1(utf8_binary string collate utf8_binary, utf8_lcase string collate utf8_lcase) using parquet
-- !query schema
struct<>
-- !query output



-- !query
insert into t1 values ('abcdcba', 'aBcDCbA')
-- !query schema
struct<>
-- !query output



-- !query
select TRIM(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select TRIM(utf8_lcase, utf8_binary collate utf8_lcase), TRIM(utf8_lcase collate utf8_binary, utf8_binary) from t1
-- !query schema
struct<TRIM(BOTH utf8_lcase FROM collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,TRIM(BOTH collate(utf8_lcase, utf8_binary) FROM utf8_binary):string>
-- !query output
	d


-- !query
select TRIM('ABC', utf8_binary), TRIM('ABC', utf8_lcase) from t1
-- !query schema
struct<TRIM(BOTH ABC FROM utf8_binary):string,TRIM(BOTH ABC FROM utf8_lcase):string collate UTF8_LCASE>
-- !query output
abcdcba	D


-- !query
select BTRIM(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select BTRIM(utf8_lcase, utf8_binary collate utf8_lcase), BTRIM(utf8_lcase collate utf8_binary, utf8_binary) from t1
-- !query schema
struct<btrim(utf8_lcase, collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,btrim(collate(utf8_lcase, utf8_binary), utf8_binary):string>
-- !query output
	BcDCbA


-- !query
select BTRIM('ABC', utf8_binary), BTRIM('ABC', utf8_lcase) from t1
-- !query schema
struct<btrim(ABC, utf8_binary):string,btrim(ABC, utf8_lcase):string collate UTF8_LCASE>
-- !query output
ABC


-- !query
select LTRIM(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select LTRIM(utf8_lcase, utf8_binary collate utf8_lcase), LTRIM(utf8_lcase collate utf8_binary, utf8_binary) from t1
-- !query schema
struct<TRIM(LEADING utf8_lcase FROM collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,TRIM(LEADING collate(utf8_lcase, utf8_binary) FROM utf8_binary):string>
-- !query output
	dcba


-- !query
select LTRIM('ABC', utf8_binary), LTRIM('ABC', utf8_lcase) from t1
-- !query schema
struct<TRIM(LEADING ABC FROM utf8_binary):string,TRIM(LEADING ABC FROM utf8_lcase):string collate UTF8_LCASE>
-- !query output
abcdcba	DCbA


-- !query
select RTRIM(utf8_binary, utf8_lcase) from t1
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "COLLATION_MISMATCH.IMPLICIT",
  "sqlState" : "42P21"
}


-- !query
select RTRIM(utf8_lcase, utf8_binary collate utf8_lcase), RTRIM(utf8_lcase collate utf8_binary, utf8_binary) from t1
-- !query schema
struct<TRIM(TRAILING utf8_lcase FROM collate(utf8_binary, utf8_lcase)):string collate UTF8_LCASE,TRIM(TRAILING collate(utf8_lcase, utf8_binary) FROM utf8_binary):string>
-- !query output
	abcd


-- !query
select RTRIM('ABC', utf8_binary), RTRIM('ABC', utf8_lcase) from t1
-- !query schema
struct<TRIM(TRAILING ABC FROM utf8_binary):string,TRIM(TRAILING ABC FROM utf8_lcase):string collate UTF8_LCASE>
-- !query output
abcdcba	aBcD


-- !query
drop table t1
-- !query schema
struct<>
-- !query output

